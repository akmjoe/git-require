#!/bin/bash

usage() {
	if [ -z "$1" ]; then
	    echo -e "To add a require: \e[1mgit require [options] [name <path-to-source> <path-to-destination>]\e[0m"
	    echo ""
	    echo -e "Options:"
	    echo -e "\e[1m-c\e[0m Copy files instead of using symbolic links"
	    echo -e "\e[1m-d\e[0m Use hard links instead of symbolic links"
	    echo ""
	    echo -e "Other commands:"
	    echo -e "\e[1mupdate [options] [name]\e[0m	Update files"
	    echo -e "\e[1mremove [name]\e[0m	Remove required directory"
	    echo -e "\e[1minit\e[0m	Initialize and add .git-require to git exclude list"
	    echo -e "\e[1mstatus [options]\e[0m Display git status of remote repositories. The -o option opens modified git repositories in a new terminal"
	    echo -e "\e[1menable [name]\e[0m Enable require"
	    echo -e "\e[1mdisable [name]\e[0m Disable require"
	    echo -e "\e[1mlist\e[0m Lists requires and require paths"
	    echo -e "\e[1mall\e[0m \"command\" Runs the specified command in all git directories."
	    echo
	    echo -e "Try \e[1mgit require -h [command]\e[0m for more information about a specific command"
	    echo
	else
		case "$1" in
			"update")
				echo -e "\e[1mgit require update [options] [name]\e[0m	Update files"
				echo -e "Options:"
	    		echo -e "\e[1m-f\e[0m Force overwrite conflicting files"
			return 0
			;;
			"remove")
				echo -e "\e[1mgit require remove [name]\e[0m	Remove required directory"
			return 0
			;;
			"init")
				echo -e "\e[1mgit require init\e[0m	Initialize and add .git-require to git exclude list"
			return 0
			;;
			"status")
				echo -e "\e[1mgit require status [-o]\e[0m Display git status of remote repositories."
				echo -e "Options:"
	    		echo -e "\e[1m-o\e[0m Open modified git repositories in a new terminal (system command must be provided in configuration)"
			return 0
			;;
			"enable")
				echo -e "\e[1mgit require enable [name]\e[0m Enable require"
			return 0
			;;
			"disable")
				echo -e "\e[1mgit require disable [name]\e[0m Disable require"
			return 0
			;;
			"list")
				echo -e "\e[1mgit require list\e[0m Lists requires and require paths"
			return 0
			;;
			"all")
				echo -e "\e[1mgit require all\e[0m \"command\" Runs the specified command in all git directories."
			return 0
			;;
		esac
   fi
   
    #echo "If source is a remote repository, a copy will be placed in the .git-require directory."
}

version() {
    echo "git require plugin v0.1.0"
    echo
}

all() {
	if [ -z "$1" ]; then
		return 1
	fi
	paths=()
	checked=()
	while IFS= read -r -d $'\0'; do
	    paths+=("$REPLY")
	done < <(cd .git-require && find . -maxdepth 1 -type d -print0)
	# save current directory
	home=$(realpath .)
	files=()
	for f in "${paths[@]}"; do
		if [ $f == "." ]; then
			continue
		fi
		cd $home
		while IFS=$'\t' read -r from to mode; do
			cd $from
			until [ "$(exec pwd)" = / ]; do
				containsElement "`pwd`" "${files[@]}"
				if [ $? == "0" ]; then
					break
				elif [ -d .git ]; then
					# add to found list
					files+=("`pwd`")
					# run command
					echo -e "\e[32m`pwd`\e[0m:"
					echo "`git $1`"
					break
				else
					cd ../
				fi
			done
		done < ".git-require/$f/info"
	done
}

status() {
	# get system settings
	if [ -f ".git-require/system" ]; then
		while IFS=$'\t' read -r key terminal; do
			if [ "$key" == "terminal" ]; then
				break
			fi
		done < ".git-require/system"
	fi
	paths=()
	checked=()
	while IFS= read -r -d $'\0'; do
	    paths+=("$REPLY")
	done < <(cd .git-require && find . -maxdepth 1 -type d -print0)
	# save current directory
	home=$(realpath .)
	files=()
	for f in "${paths[@]}"; do
		if [ $f == "." ]; then
			continue
		fi
		cd $home
		while IFS=$'\t' read -r from to mode; do
			cd $from
			until [ "$(exec pwd)" = / ]; do
				containsElement "`pwd`" "${files[@]}"
				if [ $? == "0" ]; then
					break
				elif [ -d .git ]; then
					files+=("`pwd`")
					if [[ $(git status -s) ]]; then
						echo -e "\e[31m`pwd` Has changes\e[0m"
						if [[ "$1" == "-o" ]] || [[ "$1" == "open" ]] && [[ "$terminal" ]]; then
							# open a terminal
							title=${PWD##*/}
							$($terminal"`pwd`" --title="$title")
						fi
					else
						echo "`pwd` up to date"
					fi
					break
				else
					cd ../
				fi
			done
		done < ".git-require/$f/info"
	done
}

remove() {
	#path="$(echo "$1" | sed -e 's,\/,-,g')"
	path=$1
	if [ ! -d ".git-require/$path" ]; then
		echo "$1 is not in the require list! Cannot remove."
		return 1
	fi
	if [ ! -f ".git-require/remove" ]; then
		touch ".git-require/remove"
	fi
	echo "$path" >> ".git-require/remove"
	echo "$1 staged for removal. Run 'git require update' to apply (Note: this cannot be undone!)"
}

able() {
	if [ ! -z $2 ]; then
		path="$(echo "$2" | sed -e 's,\/,-,g')"
		paths=($path)
	else
		paths=()
		while IFS= read -r -d $'\0'; do
		    paths+=("$REPLY")
		done < <(cd .git-require && find . -maxdepth 1 -type d -print0)
	fi
	# Loop through paths
	for f in "${paths[@]}"; do
		if [ -z $f ] || [ $f == "." ]; then
			continue
		fi
		touch ".git-require/$f/temp-info"
		while IFS=$'\t' read -r from to mode status; do
			# Looping through file entries, enabling
			if [ "$1" == "true" ]; then
				echo -e "$from\t$to\t$mode\ttrue" >> ".git-require/$f/temp-info"
			else
				echo -e "$from\t$to\t$mode\tfalse" >> ".git-require/$f/temp-info"
			fi
		done < ".git-require/$f/info"
		# now remove info and rename temp-info to info
		rm ".git-require/$f/info"
		mv ".git-require/$f/temp-info" ".git-require/$f/info"
		if [ "$1" == "true" ]; then
			echo "$f Enabled"
		else
			echo "$f Disabled"
		fi
	done
	echo "Run git require update to activate these changes."
}

list() {
	# Get paths
	paths=()
	while IFS= read -r -d $'\0'; do
	    paths+=("$REPLY")
	done < <(cd .git-require && find . -maxdepth 1 -type d -print0)
	# Loop through paths
	for f in "${paths[@]}"; do
		if [ -z $f ] || [ $f == "." ]; then
			continue
		fi
		echo "$(echo "$f" | sed -e 's,.\/,,')"
		while IFS=$'\t' read -r from to mode status; do
			# Looping through file entries
			if [ "$status" == "true" ]; then
				echo -e "|--$from \e[42mEnabled\e[0m"
			else
				echo -e "|--$from \e[41mDisabled\e[0m"
			fi
		done < ".git-require/$f/info"
	done
}

removals() {
	if [ ! -f ".git-require/remove" ]; then
		return 1;
	fi
	# Loop through removals
	while IFS=$'\n' read -r f; do
		# Loop through files, removing them
		while IFS=$'\n' read -r file; do
			rm "$file"
		done < ".git-require/$f/list"
		# Remove require directory
		rm -r ".git-require/$f"
	done < ".git-require/remove"
	# Remove list
	rm ".git-require/remove"
	return 0
}

require() {
	path="$2"
	if [ -z $3 ]; then
		echo "No file path specified!"
		return 1;
	fi
	if [ ! -d $3 ] && [ ! -f $3 ]; then
		echo "Source file does not exist!"
		return 1;
	fi
	#path="$(echo "$3" | sed -e 's,\/,-,g')"
	if [ ! -d ".git-require/$path" ]; then
		mkdir ".git-require/$path"
	fi
	if [ ! -f ".git-require/$path/info" ]; then
		touch ".git-require/$path/info"
	fi
	if [ ! -f ".git-require/$path/list" ]; then
		touch ".git-require/$path/list"
	fi
	if [ -z $4 ]; then
		to="."
	else
		to=$4
	fi
	echo -e "$3\t$to\t$1\ttrue" >> ".git-require/$path/info"
	
	echo "Added $3 to require path. Run 'git require update' to copy files."
}

remote() {
	# get remote path
	if [ -f ".git-require/system" ]; then
		while IFS=$'\t' read -r key remote abs; do
			if [ "$key" == "remote" ]; then
				break
			fi
		done < ".git-require/system"
	fi
	if [ ! -z $2 ]; then
		path="$(echo "$2" | sed -e 's,\/,-,g')"
		paths=($path)
	else
		paths=()
		while IFS= read -r -d $'\0'; do
		    paths+=("$REPLY")
		done < <(cd .git-require && find . -maxdepth 1 -type d -print0)
	fi
	# loop through paths
	for f in "${paths[@]}"; do
		if [ -z $f ] || [ $f == "." ]; then
			continue
		fi
		# copy files
		while IFS=$'\t' read -r file; do
			dest="`echo "$file" | sed -e 's#'"$abs"'##'`"
			if [ $1 == "false" ]; then
				echo "copying to $remote/$dest `rsync -rCu -e 'ssh -l ussander' $file $remote/$dest`"
			else
				echo "copying to $remote/$dest `scp $file $remote/$dest`"
			fi
		done < ".git-require/$f/list"
	done
}

update() {
	# First remove any staged removals
	if [ -f ".git-require/remove" ]; then
		removals
	fi
	# Now proceed with the update
	if [ ! -z $2 ]; then
		path="$(echo "$2" | sed -e 's,\/,-,g')"
		paths=($path)
	else
		paths=()
		while IFS= read -r -d $'\0'; do
		    paths+=("$REPLY")
		done < <(cd .git-require && find . -maxdepth 1 -type d -print0)
	fi
	# clear conflicts file
	true > ".git-require/conflicts.log"
	# Loop through paths
	for f in "${paths[@]}"; do
		if [ -z $f ] || [ $f == "." ]; then
			continue
		fi
		# Get exclude list
		IFS=$'\n' read -d '' -r -a exclude < .git-require/exclude
		e="-path */.git"
		for p in "${exclude[@]}"; do
			if [ ! -z $p ]; then
				e+=" -o -path $p"
			fi
		done
		touch ".git-require/$f/tmp-list"
		IFS=$'\n' read -d '' -r -a files < ".git-require/$f/list"
		# Loop through destinations
		while IFS=$'\t' read -r from to mode status; do
			if [ "$status" == "false" ]; then
				# disabled - skip copy
				echo "$from is disabled - skipping"
				continue
			fi
			to=$(realpath $to)
			echo "Updating $from to $to"
			# Get extra exclude list
			if [ -f ".git-require/$f/exclude" ]; then
				IFS=$'\n' read -d '' -r -a exclude < ".git-require/$f/exclude"
				for p in "${exclude[@]}"; do
					if [ ! -z "$p" ]; then
						e+=" -o -path '$p'"
					fi
				done
			fi
			
			# Loop through files
			while IFS= read -r -d '' -u 9; do
				# update file
				mkdir -p $to/$(dirname $(realpath --relative-to=$from $REPLY))
				if [ -f $to/$(realpath --relative-to=$from $REPLY) ] || [ -d $to/$(realpath --relative-to=$from $REPLY) ]; then
					# Check if file should exist

					containsElement "$to/$(realpath --relative-to=$from $REPLY)" "${files[@]}"
					if [ $? == "1" ] && [ "$1" == "false" ]; then
						# Not from this require - file conflict. Skip.
						conflict=true
						echo "File conflict: $to/$(realpath --relative-to=$from $REPLY) exists!"
						echo "$to/$(realpath --relative-to=$from $REPLY)" >> ".git-require/conflicts.log"
						continue
					fi
				fi
				if [ $mode == "true" ]; then
					#echo "Copying $REPLY"
					cp $(realpath $REPLY) $to/$(realpath --relative-to=$from $REPLY)
				elif [ $mode == "hard" ]; then
					ln -f $(realpath $REPLY) $to/$(realpath --relative-to=$from $REPLY)
				else
					#echo "Making link to $REPLY"
					ln -s -f $(realpath $REPLY) $to/$(realpath --relative-to=$from $REPLY)
				fi
				# Add to file list
			   echo "$to/$(realpath --relative-to=$from $REPLY)" >> ".git-require/$f/tmp-list"
			done 9< <( find $from \( $e \) -prune -o -type f -exec printf '%s\0' {} + )
		done < ".git-require/$f/info"
		# Remove extra files
		IFS=$'\n' read -d '' -r -a files < ".git-require/$f/tmp-list"
		while IFS=$'\n' read -r old; do
			# Check if file in new list
			containsElement "$old" "${files[@]}"
			if [ $? == "1" ]; then
				#echo "Removing $old"
				rm "$old"
			fi
		done < ".git-require/$f/list"
		# update file list
		rm ".git-require/$f/list"
		mv ".git-require/$f/tmp-list" ".git-require/$f/list"
	done
	if [ $conflict ]; then
		echo -e "\e[31mSome conflicting files were not copied, use -f option to overwrite.\e[0m"
	fi
}

initialize() {
	if [ ! -d ".git-require" ]; then
		echo "Initializing git-require";
		mkdir ".git-require"
	fi
	if [ ! -f ".git-require/exclude" ]; then
		touch ".git-require/exclude"
	fi
	read -p "Should I add .git-require to .gitignore? Y/N" ignore
	if [ "$ignore" == "Y" ]; then
		if [ ! -f ".gitignore" ]; then
			echo "Creating exclude file"
			touch ".gitignore"
		fi
		input="$PWD/.gitignore"
		while IFS= read line; do
			if [ $line == ".git-require" ]; then
				echo "Already in exclude list."
				echo "Done initializing."
				return 0;
			fi
		done <"$input"
		echo "Adding to exclude list"
		echo ".git-require" >> ".gitignore"
	fi
	if [ ! -f ".git-require/system" ]; then
		touch ".git-require/system"
	fi
	while IFS=$'\t' read -r key com; do
		if [ "$key" == "terminal" ]; then
			break
		fi
	done < ".git-require/system"
	if [ ! "$com" ]; then
		read -p "System Command to open a new terminal (required for advanced git status, working directory will be appended):" term
		if [ "$term" ]; then
			echo -e "terminal\t$term" >> ".git-require/system"
		fi
	fi
	echo -e "Done initializing. Run \e[1mgit require -h\e[0m to list available commands."
}

containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

main() {
	# make sure a git directory
	if [ ! -d ".git" ]; then
		echo "This is not a git directory! Please run 'git init' and try again.";
	fi
	copy=false
	action=""
	force=false
 	# Check parameters
	while (( "$#" )); do
		case $1 in
			"all")
				shift
				while (( "$#" )); do
					all "$1"
					shift
				done
				exit 0
				;;
			"status")
				shift
				status "$@"; exit 0
				;;
			"-h"|"--help")
				shift
				if (( ! "$#" )); then 
					usage
				else
					usage "$1"
				fi
				exit 0
				;;
			"-v"|"--version")
				version; exit 0
				;;
			"-l"|"list")
				list; exit 0
				;;
			"-c"|"copy")
				copy=true
				;;
			"-d"|"hard")
				copy="hard"
				;;
			"-u"|"update")
				action="update"
				;;
			"-f"|"force")
				force=true
				;;
			"-r"|"remove")
				shift
				while (( "$#" )); do
					remove "$1"
					shift
				done
				exit 0
				;;
			"-i"|"init")
				initialize; exit 0
				;;
			"-e"|"enable")
				shift
				if (( ! "$#" )); then able "true"; fi
				while (( "$#" )); do
					able "true" "$1"
					shift
				done
				exit 0
				;;
			"-d"|"disable")
				shift
				if (( ! "$#" )); then able "false"; fi
				while (( "$#" )); do
					able "false" "$1"
					shift
				done
				exit 0
				;;
			"remote")
				action="remote"
				;;
			*)
				name="$1"
				shift
				path="$1"
				shift
				dest="$1"
		esac
		shift
   done
	if [ ! -d ".git-require" ]; then
		echo "Not a git-require directory! Run 'git require init' and try again."
		return 0
	fi
	# Now handle the command
	case $action in
		"update")
			update "$force" "$name"
			;;
		"remote")
			remote "$force" "$name"
			;;
		*)
			if [ -z "$path" ]; then
				echo "Invalid command!"
				usage; exit 1
			fi
			require "$copy" "$name" "$path" "$dest"
			;;
	esac
	
}

main "$@"
